sort1 uses: Bubble sort

How do you know?: sorted50000 was significantly quicker than reversed50000, signifiying the Omega(n) and an O(n^2).

sort2 uses: Merge sort

How do you know?: Compared to sort3's reversed50000, sort2's was significantly quicker--the runtime of merge sort is lower function wise than selection sort.

sort3 uses: Selection sort

How do you know?: The last remaining sort option.





Real is wall clock time - time from start to finish of the call. This is all elapsed time including time slices used by other processes and time the process spends blocked (for example if it
is waiting for I/O to complete).

User is the amount of CPU time spent in user-mode code (outside the kernel) within the process. This is only actual CPU time used in executing the process. Other processes and time the
process spends blocked do not count towards this figure.

Sys is the amount of CPU time spent in the kernel within the process. This means executing CPU time spent in system calls within the kernel, as opposed to library code, which is still
running in user-space. Like 'user', this is only CPU time used by the process. See below for a brief description of kernel mode (also known as 'supervisor' mode) and the system call
mechanism.

SORT1 TIMES (real):
-----------------------
random5000: 0.128s
random10000: 0.530s
random50000: 16.096s

reversed5000: 0.079s
reversed10000: 0.453s
reversed50000: 12.680s

sorted5000: 0.022s
sorted10000: 0.030s
sorted50000: 3.99s

SORT2 TIMES (real):
------------------------
random5000: 0.012s
random10000: 0.016s
random50000: 3.525s

reversed5000: 0.016s
reversed10000: 0.052s
reversed50000: 2.228s

sorted5000: 0.015s
sorted10000: 0.021s
sorted50000: 2.249s

SORT3 TIMES (real):
----------------------
random5000: 0.033s
random10000: 0.311s
random50000: 7.515s

reversed5000: 0.040s
reversed10000: 0.290s
reversed50000: 8.573

sorted5000: 0.037s
sorted10000: 0.193s
sorted50000: 7.851s