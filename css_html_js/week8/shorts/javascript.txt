Javascript runs client side as opposed to Python which runs server side. You can write JS code in the <script> tag of HTML. Similarly to CSS, you can write your JS in a separate file and link
them with the src attribute of the <script> tag.

Variables:
No type specifier; when a local variable is first declared, preface with the var keyword.
var x = 44;

Conditionals:
if
else
else if
?:

Loops:
while
do while
for
    for {var key in object}             // iterates across all keys; console.log(key) prints out the keys
    {
        // use object[key] in here
    }

    for {var key of object}             // iterates across all values; console.log(key) prints out the values
    {
        // use key in here
    }

Functions:
Introduced with the function keyword. They can also be anonymous (i.e. without a name)
parseInt() converts a string to an integer
array.size()
array.push(x)
array.pop()
array.shift()
array.map(function(variable) {
    function_code_here;
}); applies a function to all elements of an array


Arrays:
var num = [1, 2, 3, 4, 5, 6];
var mixed = [1, true, 3.33, 'five']

C structures contain a number of fields or members (properties), but properties themselves can never stand on their own. C is not object oriented.
struct car
{
    int year;
    char model[10]
}
struct car herbie;
herbie.year = 1963;
herbie.model = "beetle";

Can't do:
year = 1963
model = "beetle"

While we would do this in C: function(object), this does not apply in javascript. Instead we do the following: object.function()
Objects (like a Python dictionary):
var herbie = {year: 1963, model: "Beetle"};


JS has support for event handlers, which are callback functions that respond to HTML events.
<body>
    <button onclick="alertName(event)">Button 1</button>
</body>

When button 1 is clicked, the alertName() function is called and "event" is generated by the page and passed in. We then define function alertName():
function alertName(event)
{
    var trigger = event.srcElement;
    alert('you clicked on ' + trigger.innerHTML;
}